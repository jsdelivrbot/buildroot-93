From 10ae98f94071212a0674d2bb0366e876faabe370 Mon Sep 17 00:00:00 2001
Message-Id: <10ae98f94071212a0674d2bb0366e876faabe370.1464188586.git.jpinto@synopsys.com>
In-Reply-To: <937427def856e507a3e042fac4eb8e4e60fcae0a.1464188586.git.jpinto@synopsys.com>
References: <937427def856e507a3e042fac4eb8e4e60fcae0a.1464188586.git.jpinto@synopsys.com>
From: Joao Pinto <jpinto@synopsys.com>
Date: Wed, 25 May 2016 15:59:43 +0100
Subject: [PATCH 2/5] i2s: fifo depth and unmask i2s irqs

This patch makes Designware I2S driver use the fifo depth value to program
the fifo configuration register instead of using hardcoded values.

There is no need to unmask all interrupts at I2S start. This can cause 
performance issues in slower platforms. Unmask only the interrupts for
the used channels.

Signed-off-by: Joao Pinto <jpinto@synopsys.com>
---
 sound/soc/dwc/designware_i2s.c | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/sound/soc/dwc/designware_i2s.c b/sound/soc/dwc/designware_i2s.c
index bff258d..70bab81 100644
--- a/sound/soc/dwc/designware_i2s.c
+++ b/sound/soc/dwc/designware_i2s.c
@@ -106,6 +106,7 @@ struct dw_i2s_dev {
 	union dw_i2s_snd_dma_data capture_dma_data;
 	struct i2s_clk_config_data config;
 	int (*i2s_clk_cfg)(struct i2s_clk_config_data *config);
+	u32 fifo_th;
 };
 
 static inline void i2s_write_reg(void __iomem *io_base, int reg, u32 val)
@@ -147,17 +148,18 @@ static inline void i2s_clear_irqs(struct dw_i2s_dev *dev, u32 stream)
 static void i2s_start(struct dw_i2s_dev *dev,
 		      struct snd_pcm_substream *substream)
 {
+	struct i2s_clk_config_data *config = &dev->config;
 	u32 i, irq;
 	i2s_write_reg(dev->i2s_base, IER, 1);
 
 	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
-		for (i = 0; i < 4; i++) {
+		for (i = 0; i < (config->chan_nr / 2); i++) {
 			irq = i2s_read_reg(dev->i2s_base, IMR(i));
 			i2s_write_reg(dev->i2s_base, IMR(i), irq & ~0x30);
 		}
 		i2s_write_reg(dev->i2s_base, ITER, 1);
 	} else {
-		for (i = 0; i < 4; i++) {
+		for (i = 0; i < (config->chan_nr / 2); i++) {
 			irq = i2s_read_reg(dev->i2s_base, IMR(i));
 			i2s_write_reg(dev->i2s_base, IMR(i), irq & ~0x03);
 		}
@@ -231,7 +233,8 @@ static void dw_i2s_config(struct dw_i2s_dev *dev, int stream)
 		if (stream == SNDRV_PCM_STREAM_PLAYBACK) {
 			i2s_write_reg(dev->i2s_base, TCR(ch_reg),
 				      dev->xfer_resolution);
-			i2s_write_reg(dev->i2s_base, TFCR(ch_reg), 0x02);
+			i2s_write_reg(dev->i2s_base, TFCR(ch_reg),
+					dev->fifo_th - 1);
 			irq = i2s_read_reg(dev->i2s_base, IMR(ch_reg));
 			i2s_write_reg(dev->i2s_base, IMR(ch_reg), irq & ~0x30);
 			i2s_write_reg(dev->i2s_base, TER(ch_reg), 1);
@@ -239,6 +242,8 @@ static void dw_i2s_config(struct dw_i2s_dev *dev, int stream)
 			i2s_write_reg(dev->i2s_base, RCR(ch_reg),
 				      dev->xfer_resolution);
 			i2s_write_reg(dev->i2s_base, RFCR(ch_reg), 0x07);
+			i2s_write_reg(dev->i2s_base, RFCR(ch_reg),
+					dev->fifo_th - 1);
 			irq = i2s_read_reg(dev->i2s_base, IMR(ch_reg));
 			i2s_write_reg(dev->i2s_base, IMR(ch_reg), irq & ~0x03);
 			i2s_write_reg(dev->i2s_base, RER(ch_reg), 1);
@@ -498,6 +503,7 @@ static int dw_configure_dai(struct dw_i2s_dev *dev,
 	 */
 	u32 comp1 = i2s_read_reg(dev->i2s_base, dev->i2s_reg_comp1);
 	u32 comp2 = i2s_read_reg(dev->i2s_base, dev->i2s_reg_comp2);
+	u32 fifo_depth = 1 << (1 + COMP1_FIFO_DEPTH_GLOBAL(comp1));
 	u32 idx;
 
 	if (dev->capability & DWC_I2S_RECORD &&
@@ -535,6 +541,8 @@ static int dw_configure_dai(struct dw_i2s_dev *dev,
 		dev_dbg(dev->dev, "designware: i2s slave mode supported\n");
 		dev->capability |= DW_I2S_SLAVE;
 	}
+	
+	dev->fifo_th = fifo_depth / 2;
 
 	return 0;
 }
-- 
1.8.1.5

